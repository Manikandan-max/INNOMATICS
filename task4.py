# -*- coding: utf-8 -*-
"""Task4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cntzC-GKS26yXbeJ6yGuWp5uIobWcONM

## Task 4

### Single Number
"""

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        dic={}
        for num in nums:
            dic[num] = dic.get(num, 0) + 1
        for key, value in dic.items():
            if value == 1:
                return key

"""### Sort Integers by The Number of 1 Bits"""

class Solution:
    def sortByBits(self, arr: List[int]) -> List[int]:
        d=[]
        for i in sorted(arr):
            d.append((i,bin(i).count('1')))
        sd = sorted(d, key=lambda i: i[1])
        ans=[]
        for i in sd:
            ans.append(i[0])
        return ans

"""### Single Number III"""

class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        t = 0
        a = 0
        b = 0
        for num in nums:
            t ^= num
        m = 1
        while(t&m == 0):
            m = m << 1
        for num in nums:
            if num&m:
                a ^= num
            else:
                b ^= num
        return [a, b]

"""### Subsets"""

class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        res = [[]]
        for n in nums:
            res += [[n]+r for r in res]
        return res